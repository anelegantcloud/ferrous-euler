#[cfg(test)]
mod tests_correctness {
    // This module tests numerical output of problem statements for correctness. Solutions:
    // https://github.com/luckytoilet/projecteuler-solutions/blob/master/Solutions.md

    use ferrous_euler;

    #[test]
    fn solution_1() {
        // Find the sum of natural numbers below threshold X that are multiples of 3 or 5.
        let bases = vec![3, 5];
        // The sum of these multiples is 23 when X = 10.
        assert_eq!(ferrous_euler::sum_of_multiples(&bases, 10), 23);
        // Find the sum of all the multiples of 3 or 5 when X = 1000.
        assert_eq!(ferrous_euler::sum_of_multiples(&bases, 1000), 233168);
    }

    #[test]
    fn solution_2() {
        // Each new term in the Fibonacci sequence is generated by adding the previous two terms.
        // By starting with 1 and 2, the first 10 terms will be 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        assert_eq!(
            ferrous_euler::fibonacci(1, 2, 90, 1),
            [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
        );
        // By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
        let even_fibonacci = ferrous_euler::fibonacci(0, 1, 4000000, 2);
        assert_eq!(even_fibonacci.iter().sum::<usize>(), 4613732);
    }
}
